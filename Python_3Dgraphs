#3D graphs

import numpy as np 
import matplotlib.pyplot as plt 


fig = plt.figure() 
ax = plt.axes(projection ='3d') 

                    <----------->

#2.dimensional line graph

# importing mplot3d toolkits, numpy and matplotlib 
from mpl_toolkits import mplot3d 
import numpy as np 
import matplotlib.pyplot as plt 

fig = plt.figure() 

# syntax for 3-D projection 
ax = plt.axes(projection ='3d') 

# defining all 3 axes 
z = np.linspace(0, 1, 100) 
x = z * np.sin(25 * z) 
y = z * np.cos(25 * z) 

# plotting 
ax.plot3D(x, y, z, 'green') 
ax.set_title('3D line plot') 
plt.show() 

                    <-------->

#3. dimensional scattered graph
# importing mplot3d toolkits 
from mpl_toolkits import mplot3d 
import numpy as np 
import matplotlib.pyplot as plt 

fig = plt.figure() 

# syntax for 3-D projection 
ax = plt.axes(projection ='3d') 

# defining axes 
z = np.linspace(0, 1, 100) 
x = z * np.sin(25 * z) 
y = z * np.cos(25 * z) 
c = x + y 
ax.scatter(x, y, z, c = c) 

# syntax for plotting 
ax.set_title('3d Scatter plot ') 
plt.show() 

                <--------->

# 4 . Surface graph
# importing libraries 
from mpl_toolkits import mplot3d 
import numpy as np 
import matplotlib.pyplot as plt 

# defining surface and axes 
x = np.outer(np.linspace(-2, 2, 10), np.ones(10)) 
y = x.copy().T 
z = np.cos(x ** 2 + y ** 3) 

fig = plt.figure() 

# syntax for 3-D plotting 
ax = plt.axes(projection ='3d') 

# syntax for plotting 
ax.plot_surface(x, y, z, cmap ='viridis', edgecolor ='green') 
ax.set_title('Surface plot') 
plt.show() 

                          <-------->

#5.Wireframes
from mpl_toolkits import mplot3d 
import numpy as np 
import matplotlib.pyplot as plt 


# function for z axea 
def f(x, y): 
	return np.sin(np.sqrt(x ** 2 + y ** 2)) 

# x and y axis 
x = np.linspace(-1, 5, 10) 
y = np.linspace(-1, 5, 10) 

X, Y = np.meshgrid(x, y) 
Z = f(X, Y) 

fig = plt.figure() 
ax = plt.axes(projection ='3d') 
ax.plot_wireframe(X, Y, Z, color ='green') 
ax.set_title('wireframe '); 

<-----Plotting Surface Triangulations------->
1.1
from mpl_toolkits import mplot3d 
import numpy as np 
import matplotlib.pyplot as plt 


# angle and radius 
theta = 2 * np.pi * np.random.random(100) 
r = 6 * np.random.random(100) 

# all three axes 
x = np.ravel(r * np.sin(theta)) 
y = np.ravel(r * np.cos(theta)) 
z = f(x, y) 

ax = plt.axes(projection ='3d') 
ax.scatter(x, y, z, c = z, cmap ='viridis', linewidth = 0.25); 

ax = plt.axes(projection ='3d') 
ax.plot_trisurf(x, y, z, cmap ='viridis', edgecolor ='green'); 

                             <--------->
                             
1.2
from mpl_toolkits import mplot3d 
import numpy as np 
import matplotlib.pyplot as plt 
from matplotlib.tri import Triangulation 


theta = np.linspace(0, 2 * np.pi, 10) 
w = np.linspace(-1, 5, 8) 
w, theta = np.meshgrid(w, theta) 
phi = 0.5 * theta 

# radius in x-y plane 
r = 1 + w * np.cos(phi) 

# all three axes 
x = np.ravel(r * np.cos(theta)) 
y = np.ravel(r * np.sin(theta)) 
z = np.ravel(w * np.sin(phi)) 

# triangulate in the underlying 
# parametrization 
tri = Triangulation(np.ravel(w), np.ravel(theta)) 

ax = plt.axes(projection ='3d') 
ax.plot_trisurf(x, y, z, triangles = tri.triangles, 
				cmap ='viridis', linewidths = 0.2); 





