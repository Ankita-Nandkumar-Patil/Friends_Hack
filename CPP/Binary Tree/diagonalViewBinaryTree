#include <bits/stdc++.h>
using namespace std;
void diagonalview(int tree[], int n)
{
    if(n==0)    //if tree is empty
        return;
        
    queue<int> q;
    q.push(0);  //push root
    q.push(-1); //push delimiter
    int i=0;  //posn of current element   left at 2i+1   right at 2i+2
    
    while(q.front()!=-1){   //while  the queue has elements

        while(q.front()!=-1 )//for each element in queue before the delimiter
        {
            i=q.front();
            q.pop();
            while(i<n && tree[i]!=-1){  //for each right child that exists
                cout<<tree[i]<<" ";
                if(i*2+1<n&&i*2+1!=-1)  //check and push left  child
                {
                    q.push(i*2+1);
                }
                i=i*2+2;    //move to right child
            }
        }
        q.pop();    //remove delimiter(-1) from front
        cout<<endl;
        
        q.push(-1); //add delimiter
    }
  
}
int main() {
    
    int n;
    cin>>n;
    int tree[n];
    for(int i=0;i<n;i++)
        cin>>tree[i];
   
   diagonalview(tree, n); 
    return 0;
}
